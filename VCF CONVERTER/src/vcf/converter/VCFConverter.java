/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vcf.converter;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import java.nio.file.Files;
import java.io.FileWriter;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 *
 * @author user
 */
public class VCFConverter extends javax.swing.JFrame {

    /**
     * Creates new form VCFConverter
     */
    public VCFConverter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        excelLocation = new javax.swing.JButton();
        excelLocationIs = new javax.swing.JLabel();
        outputLocation = new javax.swing.JButton();
        outputLocationIs = new javax.swing.JLabel();
        convert = new javax.swing.JButton();
        excelChooser = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        excelLocation.setText("Browse Excel File");
        excelLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelLocationActionPerformed(evt);
            }
        });

        excelLocationIs.setText("Excel file browsed is");

        outputLocation.setText("Browse Output Location");
        outputLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputLocationActionPerformed(evt);
            }
        });

        outputLocationIs.setText("Output file name would be");

        convert.setText("Convert");
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });

        excelChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(convert)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(excelLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outputLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(excelLocationIs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(excelChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(outputLocationIs)
                                .addContainerGap(37, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(excelLocation)
                        .addComponent(excelLocationIs))
                    .addComponent(excelChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputLocation)
                    .addComponent(outputLocationIs))
                .addGap(18, 18, 18)
                .addComponent(convert)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void excelLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelLocationActionPerformed
        // TODO add your handling code here:
        int returnVal = excelChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = excelChooser.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            excelLocationIs.setText(file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_excelLocationActionPerformed

    private void excelChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_excelChooserActionPerformed

    private void outputLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputLocationActionPerformed
        JFileChooser chooser;
        /*int returnVal = excelChooser.showOpenDialog(this);
        
        excelChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        excelChooser.setAcceptAllFileFilterUsed(false);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = excelChooser.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            outputLocationIs.setText(file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }*/
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("select output file location");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            outputLocationIs.setText(file.getAbsolutePath());
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_outputLocationActionPerformed

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        // TODO add your handling code here:
        String[][] data;
        ParseFile parser;
        VCFcreate vCreate;
        String[] args = new String[2];
        args[0] = excelLocationIs.getText();
        args[1] = outputLocationIs.getText();

        System.out.println("Excel : " + excelLocationIs.getText());
        System.out.println("Output :" + outputLocationIs.getText());

        //CHECKING FOR VALIDITY OF PATHS PROVIDED FOR 2 FILES
        if (!(new File(args[0]).exists()) || (new File(args[0]).isDirectory())) {
            System.out.println("1. Excel file provided does not exsist!!!!");
            return;
        }
        if (!(new File(args[1]).exists() && new File(args[1]).isDirectory())) {
            System.out.println("Location of output file provided does not exsist!!!!");
            return;
        }

        System.out.println("First stage check completed");
        parser = new ParseFile();
        System.out.println("Name of the excel file is:" + args[0]);
        System.out.println("Location of the output vcf file is:" + args[1]);
        parser.setFile(args[0]);
        data = parser.parse();
        System.out.println("Number of rows in data is:" + data.length);
        System.out.println("Number of columns in data is:" + data[0].length);
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[0].length; j++) {
                if (data[i][j] == "" || data[i][j] == " ") {
                    data[i][j] = "NA";
                }
            }
        }
        /*
		System.out.println("The data is...");	
		for(int i=0;i<data.length;i++){
			for(int j=0;j<data[0].length;j++)
				System.out.print(data[i][j]+"\t");
			System.out.println(" ");
		}
         */

        vCreate = new VCFcreate();
        vCreate.setLocation(args[1]);
        vCreate.createVCFFile(data);

    }//GEN-LAST:event_convertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VCFConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VCFConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VCFConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VCFConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VCFConverter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convert;
    private javax.swing.JFileChooser excelChooser;
    private javax.swing.JButton excelLocation;
    private javax.swing.JLabel excelLocationIs;
    private javax.swing.JButton outputLocation;
    private javax.swing.JLabel outputLocationIs;
    // End of variables declaration//GEN-END:variables
}
